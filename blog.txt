npx create-next-app food-order
yarn dev

theme color
#d1411e

pages/index.js
delete everything inside the root div instead of <Head/>
customize Head children

Pages
/
/product/2
/orders/2
/cart

image folder in public folder

/component/Layout to shortcut Navbar - page components - Footer

delete everything in /styles/Home.module.css

/pages/_app.js is the view
wrap <Component {...pageProps}> inside the Layout
Nav and Footer will appear in all pages now

we don't need router to route pages
go to /about

styles should be in /styles
example: /styles/Navbar.module.css

/img/
/ cz in public

layout='fill' replaces doing width and height to Image
then add objectFit="contain"

100hv for full screen, but -100px cz Navbar
300vw for full screen

display flex did put them z each other

get rid of horizontal scroll: in container css, overflow: hidden

style={{ transform: `translateX(${-100*index}vw)` }}
on the map wrapper. change images of the featured
-100vw represents one screen
transition: all 1.5s ease-in-out; is it's animation

i'm making the Featured z-index higher than the Navbar and that's looking so cool.

localhost:3000/Product/id=233215
so we make a /pages/product/
and ./[id].jsx
here we do Product Page

position: relative; the image container
the image wasn't obedient

the htmlFor in the label tag refers to the checkbox id

the Cart page will not use a sluck, so no need to create a folder and [id].js

opacity is like brightness

we will use common breakpoints to make the app responsive for the mobile view also
@media screen and (max-width:480px) {}
that was in the css of Navbar, Featured, PizzaCard, Footer, Product,...
it holds classNames that will be altered

add a .env and MONGODB_URL
the url is from the cluster connect

we're creating a libraries (util) and doing mongoose stuff there

we create our models. to create and read from documents(alt. tables)

to use our models, we will go inside pages/api/
delete the file hello.js that contains:
    export default function handler(req, res) {
    res.status(200).json({ name: 'John Doe' })
    }
and create folders: products - orders
we want localhost:3000/api/products to fetch all pizzas. and we can do a post request on it to add new pizza